Current Versions
o Python 2.7.2
o QT 4.7.3
o Numpy 1.6.1
o SIP 4.12.4
o PyQt 4.8.5
o matplotlib 1.0.1
o scipy 0.9.0
o elixir 0.7.1 (for Green)
o pyaudio
o py2app 0.6.3
o Mercurial 1.9.1
o modulegraph 0.9.2

Upgrade History:

- 2011-08-07: Moved to OS X 10.7 and Upgraded
 . PyQt 4.8.4 => 4.8.5
 . SIP 4.12.3 => 4.12.4
 . Mercurial 1.7.3 => 1.9.1
 . modulegraph 0.8.2 => 0.9.2
- 2011-07-22: Upgraded
 . Numpy 1.6.0 => 1.6.1 
- 2011-06-30: Upgraded
 . py2app 0.5.2 => 0.6.3
- 2011-06-28: Upgraded
 . Python 2.7.1 => 2.7.2
- 2011-05-12: Upgraded 
 . Qt 4.7.2 => Qt 4.7.3
 . Numpy 1.5.1 => 1.6.0
 . SIP 4.12.1 => 4.12.3
 . PyQt 4.8.3 => 4.8.4

--- 32bit Leopard & Snow Leopard Carbon Setup:

X) before any installation (for 10.4 PPC compatibility if XCode 4 is installed!)

Install XCode3+XCode4:
1) Install XCode3 without System Tools or Unix Development packages. Choose /Xcode3 as installation folder!
NOTE: to install XCode 3.x on OS X Lion:
 o Open Terminal
 o Enter the command: export COMMAND_LINE_INSTALL=1
 o Enter the command: open “/Volumes/Xcode and iOS SDK/Xcode and iOS SDK.mpkg”
2) Install XCode4 with System Tools and Unix Development packages
3) Restoring 10.4/10.5 SDK Support
# cd /Developer/SDKs
# sudo ln -s /Xcode3/SDKs/MacOSX10.4u.sdk .
# sudo ln -s /Xcode3/SDKs/MacOSX10.5.sdk .
4) Restoreing GCC 4.0 Support
# cd /Developer/usr/bin
# for SRC_FILE in /Xcode3/usr/bin/*4.0*; do sudo ln -s "$SRC_FILE" .; done
# cd /Developer/usr/libexec/gcc/powerpc-apple-darwin10
# sudo ln -s /Xcode3/usr/libexec/gcc/powerpc-apple-darwin10/4.0.1 .
# cd /Developer/Library/Xcode/PrivatePlugIns
# cd Xcode3Core.ideplugin/Contents/SharedSupport/Developer/Library/Xcode/Plug-ins
# sudo ln -s "/Xcode3/Library/Xcode/Plug-ins/GCC 4.0.xcplugin" . 
5) Restoring PPC Support for GCC 4.0.1 
# cd /usr/libexec/gcc/powerpc-apple-darwin10/4.0.1
# sudo mv as as.bak
# sudo ln -s /Xcode3/usr/bin/as .
# sudo mv ld ld.bak
# sudo ln -s /Xcode3/usr/bin/ld .

------

a) ensure to use gcc-4.0 (as otherwise there is a issue with stdarg.h in MacOSX10.4.u.sdk)
sudo rm /usr/bin/cc
sudo rm /usr/bin/gcc
sudo rm /usr/bin/c++
sudo rm /usr/bin/g++
sudo ln -s /usr/bin/gcc-4.0 /usr/bin/gcc
sudo ln -s /usr/bin/gcc-4.0 /usr/bin/cc
sudo ln -s /usr/bin/c++-4.0 /usr/bin/c++
sudo ln -s /usr/bin/g++-4.0 /usr/bin/g++

b) switch back to gcc-4.2

sudo rm /usr/bin/cc
sudo rm /usr/bin/gcc
sudo rm /usr/bin/c++
sudo rm /usr/bin/g++
sudo ln -s /usr/bin/gcc-4.2 /usr/bin/cc
sudo ln -s /usr/bin/gcc-4.2 /usr/bin/gcc
sudo ln -s /usr/bin/c++-4.2 /usr/bin/c++
sudo ln -s /usr/bin/g++-4.2 /usr/bin/g++



Install universal binary (PPC/Intel) setup on Snow Leopard 10.6.5 (with support for 10.4.x)

0) Install Python 2.7.2

download and install:

http://www.python.org/ftp/python/2.7.2/python-2.7.2-macosx10.3.dmg

set default to 32bit:
# defaults write com.apple.versioner.python Prefer-32-Bit -bool yes

1) Install QT ("Framework Only" without the debug libs and not the "SDK/Complete Component Environment")

download and install:

http://get.qt.nokia.com/qt/source/qt-mac-carbon-opensource-4.7.3.dmg (Carbon)


2) Install pyserial 

download latest source (pyserial-2.5.tar.gz) from http://pypi.python.org/pypi/pyserial

# tar xzf pyserial-2.5.tar.gz
# cd pyserial-2.5
export MACOSX_DEPLOYMENT_TARGET=10.4
export CFLAGS="-arch i386 -arch ppc"
export FFLAGS="-m32"
export LDFLAGS="-Wall -undefined dynamic_lookup -bundle -arch i386 -arch ppc -Xlinker -headerpad_max_install_names"
export PYTHONPATH="/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages"
export CC=/usr/bin/gcc-4.0

add the following lines on the head of the setup.py file
# vi setup.py
from distutils import sysconfig
their_parse_makefile = sysconfig.parse_makefile
def my_parse_makefile(filename, g):
    their_parse_makefile(filename, g)
    g['MACOSX_DEPLOYMENT_TARGET'] = '10.4'
sysconfig.parse_makefile = my_parse_makefile

# python setup.py build
# sudo python setup.py install


*) freetype 2.4.4

the X11 one in /Developer/SDK is not "relocatable"

install freetype from FreeType_Framework-2.3.9-1.dmg
into /Library/Frameworks/FreeType.framework/Versions/2.3/unix/lib/libfreetype.dylib
recompile matplotlib with corresponding paths:

#    module.include_dirs.append('/Library/Frameworks/FreeType.framework/Versions/2.3/unix/include')
#    module.include_dirs.append('/Library/Frameworks/FreeType.framework/Versions/2.3/unix/include/freetype2')


3) Install Numpy

the 10.4/PPC port works only with the 1.5.1 numpy universal 10.3 installer. The 1.6.1b2 installer comes without PPC code
(note that the matplotlib needs to be recompiled to work with this older numpy version!)

--
from Source:

get latest source from http://sourceforge.net/projects/numpy/files/

export MACOSX_DEPLOYMENT_TARGET=10.4
export CFLAGS="-arch i386 -arch ppc -I/usr/local/include -isysroot /Developer/SDKs/MacOSX10.4u.sdk"
export FFLAGS="-m32 -arch i386 -arch ppc"
export LDFLAGS="-lgfortran -shared -Wall -undefined dynamic_lookup -bundle -arch i386 -arch ppc -L/usr/local/lib -syslibroot /Developer/SDKs/MacOSX10.4u.sdk -Xlinker -headerpad_max_install_names"
export PYTHONPATH="/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages"

export CC=/usr/bin/gcc-4.0
# cd numpy-1.6.0b2
# cp site.cfg.example site.cfg

add the following lines on the head of the setup.py file
# vi setup.py
from distutils import sysconfig
their_parse_makefile = sysconfig.parse_makefile
def my_parse_makefile(filename, g):
    their_parse_makefile(filename, g)
    g['MACOSX_DEPLOYMENT_TARGET'] = '10.4'
sysconfig.parse_makefile = my_parse_makefile

# python setup.py build
# python setup.py install


test
# unset MACOSX_DEPLOYMENT_TARGET
# easy_install nose
# python -c 'import numpy; numpy.test()'


[CPC385:/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/numpy/core] otool -L multiarray.so
multiarray.so (architecture ppc):
	/usr/lib/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0)
	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 88.3.11)
multiarray.so (architecture i386):
	/usr/lib/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0)
	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 88.3.11)
=> does not work on PPC/ 10.4

with numpy-1.5.1 installer:
[CPC385:/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/numpy/core] otool -L multiarray.somultiarray.so (architecture ppc):
	/usr/lib/libmx.A.dylib (compatibility version 1.0.0, current version 47.1.0)
	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 88.3.6)
multiarray.so (architecture i386):
	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 88.3.6)


install_name_tool -change /usr/lib/libgcc_s.1.dylib /opt/local/lib/gcc43/libgcc_s.1.dylib multiarray.so




===
install scons

a) install numscons

download numscons-0.12.0
# cd numscons-0.12.0
# python setup.py build
# sudo python setup.py install


b)
download scons-2.0.1.tar.gz
# tar xzf scons-2.0.1.tar.gz
# cd scons-2.0.1/

# sudo python setup.py install


install numpy via scons:
# python setupscons.py scons --jobs=2
or
# LDFLAGS="-Wall -undefined dynamic_lookup -bundle -arch i386 -arch ppc -Xlinker -headerpad_max_install_names"  FFLAGS="-arch i386 -arch ppc" python setupscons.py install




4) Install SIP

export MACOSX_DEPLOYMENT_TARGET=10.4
export CFLAGS="-arch i386 -arch ppc"
export FFLAGS="-m32"
export LDFLAGS="-Wall -undefined dynamic_lookup -bundle -arch i386 -arch ppc -Xlinker -headerpad_max_install_names"
export PYTHONPATH="/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages"
export CC=/usr/bin/gcc-4.0


# cd sip-4.12.4
# python configure.py -n --deployment-target=10.4 --arch i386 --arch ppc --sdk MacOSX10.4u.sdk -d/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages -b /usr/local/bin -e /usr/local/include -v /usr/local/share/sip --deployment-target=10.4
# make
# sudo make install


5) Install PyQt

export MACOSX_DEPLOYMENT_TARGET=10.4
export CFLAGS="-arch i386 -arch ppc -I/usr/local/include -isysroot /Developer/SDKs/MacOSX10.4u.sdk"
export FFLAGS="-m32 -arch i386 -arch ppc"
export LDFLAGS="-Wall -undefined dynamic_lookup -bundle -arch i386 -arch ppc -Xlinker -headerpad_max_install_names  -L/usr/local/lib -syslibroot /Developer/SDKs/MacOSX10.4u.sdk"
export PYTHONPATH="/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages"
export SUBLIBS="-L/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/system -L/Developer/SDKs/MacOSX10.4u.sdk/usr/lib"
export CC=/usr/bin/gcc-4.0
# tar xzf PyQt-mac-gpl-4.8.5.tar.gz 
# cd PyQt-mac-gpl-4.8.5

ensure that the sip configuration file generated in the previous step is found
# export PYTHONPATH=/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages:/Library/Frameworks/Python.framework/Versions/2.7/lib/:$PYTHONPATH

## test if correct sipconfig from the sip install in step 4 above is loaded:
# import sipconfig
# sipcfg = sipconfig.Configuration()
# print sipcfg.arch
i386 ppc

# python configure.py --use-arch i386 -d/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages  -b /usr/local/bin
# make
# sudo make install




6) Install matplotlib

installing matplotlib from the binary distribution
	matplotlib-1.0.1-python.org-32bit-py2.7-macosx10.3.dmg
supports PPC and Intel and seems not to depend on freetype (nor X11)

---
from source:

download from http://sourceforge.net/projects/matplotlib/files/matplotlib/matplotlib-1.0.1/


# tar xzf matplotlib-1.0.1.tar.gz
# cd matplotlib-1.0.1
export MACOSX_DEPLOYMENT_TARGET=10.4
export CFLAGS="-arch i386 -arch ppc"
export FFLAGS="-m32"
export LDFLAGS="-Wall -undefined dynamic_lookup -bundle -arch i386 -arch ppc "
export PYTHONPATH="/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages"
export CC=/usr/bin/gcc-4.0

add the following lines on the head of the setup.py file
# vi setup.py
from distutils import sysconfig
their_parse_makefile = sysconfig.parse_makefile
def my_parse_makefile(filename, g):
    their_parse_makefile(filename, g)
    g['MACOSX_DEPLOYMENT_TARGET'] = '10.4'
sysconfig.parse_makefile = my_parse_makefile

replace add_base_flags
# vi setupext.py
def add_base_flags(module):
    incdirs = filter(os.path.exists,
                     [os.path.join(p, 'include') for p in basedirlist ])
    libdirs = filter(os.path.exists,
                     [os.path.join(p, 'lib')     for p in basedirlist ]+
                     [os.path.join(p, 'lib64')     for p in basedirlist ] )

    module.include_dirs.extend(incdirs)
    module.include_dirs.append('.')
    module.library_dirs.extend(libdirs)
=>
def add_base_flags(module):
    incdirs = filter(os.path.exists,
                     [os.path.join(p, 'include') for p in basedirlist ])
    libdirs = filter(os.path.exists,
                     [os.path.join(p, 'lib')     for p in basedirlist ]+
                     [os.path.join(p, 'lib64')     for p in basedirlist ] )

    module.include_dirs.extend(incdirs)
    module.include_dirs.append('.')
#    module.include_dirs.append('/usr/local/include')
#    module.include_dirs.append('/usr/local/include/freetype2')
# the following works for 10.4/PPC but depends on X11 installation that fails to be relocated
#    module.include_dirs.append('/Developer/SDKs/MacOSX10.4u.sdk/usr/X11R6/include')
#    module.include_dirs.append('/Developer/SDKs/MacOSX10.4u.sdk/usr/X11R6/include/freetype2')
# the following works for 10.4/PPC and does not depend on X11 installation, but freetype binary that can be included in the app
    module.include_dirs.append('/Library/Frameworks/FreeType.framework/Versions/2.3/unix/include')
    module.include_dirs.append('/Library/Frameworks/FreeType.framework/Versions/2.3/unix/include/freetype2')
# V3:
    module.include_dirs.append('/usr/X11R6/include')
    module.include_dirs.append('/usr/X11R6/include/freetype2')
    module.library_dirs.extend(libdirs)
#    module.library_dirs.append('/Developer/SDKs/MacOSX10.4u.sdk/usr/X11R6/lib')
    module.library_dirs.append('/Library/Frameworks/FreeType.framework/Versions/2.3/unix/lib')
    module.include_dirs.append('/usr/X11R6/lib')


# python setup.py build
# python setup.py install



7) Install Mercurial

install Mercurial 1.7.3 binary Mercurial-1.7.3-py2.6-macosx10.6.zip
from http://mercurial.berkwood.com/

8) Install modulegraph

fetch modulegraph 0.8.2 from repository:

# hg clone https://bitbucket.org/ronaldoussoren/modulegraph
# cd modulegraph
# python setup.py build
# python setup.py install

9) py2app (0.6.3 from Dist)

do the following in a folder that does not contain any py2app elements
# curl -O http://peak.telecommunity.com/dist/ez_setup.py
# sudo python ez_setup.py -U setuptools
for the latest version (note: 0.5.3, and 0.6.0-0.6.1 has an issue ignoring OPTIONS and data_files)
# sudo easy_install -U py2app
for installing a specific version
# sudo easy_install -U "py2app==0.6.3"

0.5.2 works as expected but hangs if it cannot find a file in setup-mac.py/DATA_FILES
0.6.3 seems to work as expected

NOTE:

if you receive a ".. dist.pyc'> has no 'check_packages' attribute" on doing an easy_install do the following:
# curl -O http://peak.telecommunity.com/dist/ez_setup.py
# sudo python ez_setup.py -U setuptools




10) scipy-0.9.0


Best install binary from http://sourceforge.net/projects/scipy/files/scipy/0.9.0/scipy-0.9.0-py2.7-python.org-macosx10.3.dmg

=====
From Source (incomplete!)

export MACOSX_DEPLOYMENT_TARGET=10.5
export CFLAGS="-arch i386 -arch ppc"
export CPPFLAGS="-m32"
export CXXFLAGS="-m32"
export FFLAGS="-m32"
export FCFLAGS="-m32"
export LDFLAGS="-Wall -undefined dynamic_lookup -bundle -arch i386 -arch ppc "

export PYTHONPATH="/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages"
# cd scipy-0.8.0

add the following lines on the head of the setup.py file
# vi setup.py
from distutils import sysconfig
their_parse_makefile = sysconfig.parse_makefile
def my_parse_makefile(filename, g):
    their_parse_makefile(filename, g)
    g['MACOSX_DEPLOYMENT_TARGET'] = '10.5'
sysconfig.parse_makefile = my_parse_makefile

# python setup.py build --fcompiler=gnu95

sudo python setup.py config_fc --fcompiler=gfortran install

# python setup.py install


test installation

# unset MACOSX_DEPLOYMENT_TARGET
# easy_install nose
# python -c 'import scipy; scipy.test()'



11) elixir

# easy_install Elixir

12) pyaudio

http://people.csail.mit.edu/hubert/pyaudio/

download pyaudio for Mac OS X
http://people.csail.mit.edu/hubert/pyaudio/packages/pyaudio-0.2.4.dmg
